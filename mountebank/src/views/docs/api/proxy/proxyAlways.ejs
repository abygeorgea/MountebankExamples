<p>First let's create the proxy:</p>

<pre><code data-test-id='proxy example'
           data-test-step='8'
           data-test-type='http'>
POST /imposters HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
Content-Type: application/json

{
  "port": 6568,
  "protocol": "http",
  "name": "proxyAlways",
  "stubs": [
    {
      "responses": [
        {
          "proxy": {
            "to": "http://localhost:7575",
            "mode": "proxyAlways",
            "predicateGenerators": [
              {
                "matches": {
                  "method": true,
                  "path": true,
                  "query": true
                }
              }
            ]
          }
        }
      ]
    }
  ]
}
</code></pre>

<p>Let's record a response:</p>

<pre><code data-test-id='proxy example'
           data-test-step='9'
           data-test-type='http'>
GET /test?first=1 HTTP/1.1
Host: localhost:6568
</code></pre>

<pre><code data-test-id='proxy example'
           data-test-verify-step='9'
           data-test-ignore-lines='["^Date"]'>
HTTP/1.1 200 OK
Connection: close
Date: Thu, 09 Jan 2014 02:30:31 GMT
Transfer-Encoding: chunked

call 4
</code></pre>

<p>We'll make the same request.  Unlike the <code>proxyOnce</code> mode,
this request will still be proxied:</p>

<pre><code data-test-id='proxy example'
           data-test-step='10'
           data-test-type='http'>
GET /test?first=1 HTTP/1.1
Host: localhost:6568
</code></pre>

<pre><code data-test-id='proxy example'
           data-test-verify-step='10'
           data-test-ignore-lines='["^Date"]'>
HTTP/1.1 200 OK
Connection: close
Date: Thu, 09 Jan 2014 02:30:31 GMT
Transfer-Encoding: chunked

call 5
</code></pre>

<p>Now let's make on request to a different <code>path</code>:</p>

<pre><code data-test-id='proxy example'
           data-test-step='11'
           data-test-type='http'>
GET /dir?first=1 HTTP/1.1
Host: localhost:6568
</code></pre>

<pre><code data-test-id='proxy example'
           data-test-verify-step='11'
           data-test-ignore-lines='["^Date"]'>
HTTP/1.1 200 OK
Connection: close
Date: Thu, 09 Jan 2014 02:30:31 GMT
Transfer-Encoding: chunked

call 6
</code></pre>

<p>Now we'll stop the origin server.</p>

<pre><code data-test-id='proxy example'
           data-test-step='12'
           data-test-type='http'>
DELETE /imposters/7575 HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
</code></pre>

<p>And now we'll stop the proxy imposter.  We'll use the <code>removeProxies</code> query
parameter to remove the proxy responses and stubs, and the <code>replayable</code> query
parameter to remove information not needed to recreate the imposter. There are
command line ways to execute the same operation:</p>

<p class='info-icon'>Tip: We could also use the <code><a href='/docs/commandLine#replay'>
mb replay</a></code> command to automatically remove the proxies, switching from record
mode to replay mode.</p>

<p class='info-icon'>Tip: We could also use the <code><a href='/docs/commandLine#save'>
mb save</a></code> command with the <code>--removeProxies</code> parameter to save
the imposters without the proxies, and restart using the <code>--configfile</code>
command line option. Everything in mountebank is API-first, and this example will demonstrate
using the API.</p>

<pre><code data-test-id='proxy example'
           data-test-step='13'
           data-test-type='http'>
DELETE /imposters/6568?removeProxies=true&amp;replayable=true HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
</code></pre>

<code class='hidden' data-test-id='proxy example'
                     data-test-verify-step='13'
                     data-test-ignore-lines='["[Dd]ate", "_proxyResponseTime", "Content-Length"]'>
HTTP/1.1 200 OK
Access-Control-Allow-Origin: *
Content-Type: application/json; charset=utf-8
Content-Length: 1879
Date: Mon, 27 Jan 2014 04:38:44 GMT
Connection: keep-alive

{
  "protocol": "http",
  "port": 6568,
  "name": "proxyAlways",
  "stubs": [
    {
      "predicates": [
        {
          "deepEquals": {
            "method": "GET"
          }
        },
        {
          "deepEquals": {
            "path": "/test"
          }
        },
        {
          "deepEquals": {
            "query": {
              "first": "1"
            }
          }
        }
      ],
      "responses": [
        {
          "is": {
            "statusCode": 200,
            "headers": {
              "Connection": "close",
              "Date": "Mon, 27 Jan 2014 04:38:44 GMT",
              "Transfer-Encoding": "chunked"
            },
            "body": "call 4",
            "_mode": "text",
            "_proxyResponseTime": 2
          }
        },
        {
          "is": {
            "statusCode": 200,
            "headers": {
              "Connection": "close",
              "Date": "Mon, 27 Jan 2014 04:38:44 GMT",
              "Transfer-Encoding": "chunked"
            },
            "body": "call 5",
            "_mode": "text",
            "_proxyResponseTime": 2
          }
        }
      ]
    },
    {
      "predicates": [
        {
          "deepEquals": {
            "method": "GET"
          }
        },
        {
          "deepEquals": {
            "path": "/dir"
          }
        },
        {
          "deepEquals": {
            "query": {
              "first": "1"
            }
          }
        }
      ],
      "responses": [
        {
          "is": {
            "statusCode": 200,
            "headers": {
              "Connection": "close",
              "Date": "Mon, 27 Jan 2014 04:38:44 GMT",
              "Transfer-Encoding": "chunked"
            },
            "body": "call 6",
            "_mode": "text",
            "_proxyResponseTime": 2
          }
        }
      ]
    }
  ]
}
</code>

<p>Now for the <em>coup de gr&acirc;ce</em>.  We saved off the
response we received from the <code>DELETE</code> call and are
re-<code>POST</code>ing it.</p>

<pre><code data-test-id='proxy example'
           data-test-step='14'
           data-test-type='http'>
POST /imposters HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
Content-Type: application/json

{
  "protocol": "http",
  "port": 6568,
  "name": "proxyAlways",
  "stubs": [
    {
      "predicates": [
        {
          "deepEquals": {
            "method": "GET"
          }
        },
        {
          "deepEquals": {
            "path": "/test"
          }
        },
        {
          "deepEquals": {
            "query": {
              "first": "1"
            }
          }
        }
      ],
      "responses": [
        {
          "is": {
            "statusCode": 200,
            "headers": {
              "Connection": "close",
              "Date": "Mon, 27 Jan 2014 04:38:44 GMT",
              "Transfer-Encoding": "chunked"
            },
            "body": "call 4"
          }
        },
        {
          "is": {
            "statusCode": 200,
            "headers": {
              "Connection": "close",
              "Date": "Mon, 27 Jan 2014 04:38:44 GMT",
              "Transfer-Encoding": "chunked"
            },
            "body": "call 5"
          }
        }
      ]
    },
    {
      "predicates": [
        {
          "deepEquals": {
            "method": "GET"
          }
        },
        {
          "deepEquals": {
            "path": "/dir"
          }
        },
        {
          "deepEquals": {
            "query": {
              "first": "1"
            }
          }
        }
      ],
      "responses": [
        {
          "is": {
            "statusCode": 200,
            "headers": {
              "Connection": "close",
              "Date": "Mon, 27 Jan 2014 04:38:44 GMT",
              "Transfer-Encoding": "chunked"
            },
            "body": "call 6"
          }
        }
      ]
    }
  ]
}
</code></pre>

<p>Notice the two responses on the first stub.  Let's trigger the first one:</p>

<pre><code data-test-id='proxy example'
           data-test-step='15'
           data-test-type='http'>
GET /test?first=1 HTTP/1.1
Host: localhost:6568
</code></pre>

<pre><code data-test-id='proxy example'
           data-test-verify-step='15'
           data-test-ignore-lines='["^Date"]'>
HTTP/1.1 200 OK
Connection: close
Date: Thu, 09 Jan 2014 02:30:31 GMT
Transfer-Encoding: chunked

call 4
</code></pre>

<p>Since the <code>responses</code> array represents a circular buffer, the second call
triggers the next response in order:</p>

<pre><code data-test-id='proxy example'
           data-test-step='16'
           data-test-type='http'>
GET /test?first=1 HTTP/1.1
Host: localhost:6568
</code></pre>

<pre><code data-test-id='proxy example'
           data-test-verify-step='16'
           data-test-ignore-lines='["^Date"]'>
HTTP/1.1 200 OK
Connection: close
Date: Thu, 09 Jan 2014 02:30:31 GMT
Transfer-Encoding: chunked

call 5
</code></pre>

<code class='hidden' data-test-id='proxy example'
                     data-test-step='17'
                     data-test-type='http'>
DELETE /imposters/6568
Host: localhost:<%= port %>
</code>
