<p>Let's create a binary-based imposter with multiple stubs:</p>

<pre><code data-test-id='tcp endsWith example'
           data-test-step='1'
           data-test-type='http'>
POST /imposters HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
Content-Type: application/json

{
  "port": 4549,
  "protocol": "tcp",
  "mode": "binary",
  "stubs": [<strong class='highlight1'>
    {
      "responses": [{ "is": { "data": "Zmlyc3QgcmVzcG9uc2U=" } }],
      "predicates": [{ "endsWith": { "data": "AwQ=" } }]
    }</strong>,<strong class='highlight2'>
    {
      "responses": [{ "is": { "data": "c2Vjb25kIHJlc3BvbnNl" } }],
      "predicates": [{ "endsWith": { "data": "BQY=" } }]
    }</strong>,<strong class='highlight3'>
    {
      "responses": [{ "is": { "data": "dGhpcmQgcmVzcG9uc2U=" } }],
      "predicates": [{ "endsWith": { "data": "BQY=" } }]
    }</strong>
  ]
}
</code></pre>

<p>We'll use the command line <code>base64</code> tool to decode the
request to binary before sending to the imposter.  We're sending a
base64-encoded version of four bytes: 0x1, 0x2, 0x3, and 0x4.  Our
first predicate is a base64 encoded version of 0x3 and 0x4.  The
response is a base64-encoded version of the string "first response":</p>

<pre><code data-test-id='tcp endsWith example'
           data-test-step='2'
           data-test-type='exec'>
echo '<strong class='highlight1'>AQIDBA==</strong>' | base64 --decode | nc localhost 4549
</code></pre>

<pre><code data-test-id='tcp endsWith example'
           data-test-verify-step='2'>
<strong class='highlight1'>first response</strong>
</code></pre>

<p>Next we'll send 0x1, 0x2, 0x4, 0x5, and 0x6, matching on a predicate
encoding 0x5 and 0x6:</p>

<pre><code data-test-id='tcp endsWith example'
           data-test-step='3'
           data-test-type='exec'>
echo '<strong class='highlight2'>AQIDBAUG</strong>' | base64 --decode | nc localhost 4549
</code></pre>

<pre><code data-test-id='tcp endsWith example'
           data-test-verify-step='3'>
<strong class='highlight2'>second response</strong>
</code></pre>

<p>The third stub will never run, since it matches the same requests as the
second stub.  mountebank always chooses the first stub that matches based on
the order you add them to the <code>stubs</code> array when creating the
imposter.</p>

<code class='hidden' data-test-id='tcp endsWith example'
                     data-test-step='4'
                     data-test-type='http'>
GET /imposters/4549 HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
</code>

<code class='hidden' data-test-id='tcp endsWith example'
                     data-test-verify-step='4'
                     data-test-type='http'
                     data-test-ignore-lines='["^Date", "requestFrom", "timestamp", "Content-Length"]'>
HTTP/1.1 200 OK
Access-Control-Allow-Origin: *
Vary: Accept
Content-Type: application/json; charset=utf-8
Content-Length: 1901
Date: Fri, 10 Jan 2014 14:30:49 GMT
Connection: keep-alive

{
  "protocol": "tcp",
  "port": 4549,
  "numberOfRequests": 2,
  "mode": "binary",
  "requests": [
    {
      "requestFrom": "::1:60163",
      "data": "AQIDBA==",
      "timestamp": "2014-01-10T14:30:49.022Z"
    },
    {
      "requestFrom": "::1:60172",
      "data": "AQIDBAUG",
      "timestamp": "2014-01-10T14:30:49.043Z"
    }
  ],
  "stubs": [
    {
      "responses": [
        {
          "is": {
            "data": "Zmlyc3QgcmVzcG9uc2U="
          }
        }
      ],
      "predicates": [
        {
          "endsWith": {
            "data": "AwQ="
          }
        }
      ],
      "matches": [
        {
          "timestamp": "2014-01-10T14:30:49.776Z",
          "request": {
            "requestFrom": "::1:60163",
            "data": "AQIDBA=="
          },
          "response": {
            "data": "Zmlyc3QgcmVzcG9uc2U="
          }
        }
      ]
    },
    {
      "responses": [
        {
          "is": {
            "data": "c2Vjb25kIHJlc3BvbnNl"
          }
        }
      ],
      "predicates": [
        {
          "endsWith": {
            "data": "BQY="
          }
        }
      ],
      "matches": [
        {
          "timestamp": "2014-01-10T14:30:49.794Z",
          "request": {
            "requestFrom": "::1:60172",
            "data": "AQIDBAUG"
          },
          "response": {
            "data": "c2Vjb25kIHJlc3BvbnNl"
          }
        }
      ]
    },
    {
      "responses": [
        {
          "is": {
            "data": "dGhpcmQgcmVzcG9uc2U="
          }
        }
      ],
      "predicates": [
        {
          "endsWith": {
            "data": "BQY="
          }
        }
      ]
    }
  ],
  "_links": {
    "self": {
      "href": "http://localhost:<%= port %>/imposters/4549"
    }
  }
}
</code>

<code class='hidden' data-test-id='tcp endsWith example'
                     data-test-step='5'
                     data-test-type='http'>
DELETE /imposters/4549 HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
</code>
