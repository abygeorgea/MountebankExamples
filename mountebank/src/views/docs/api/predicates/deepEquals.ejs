<p>Let's create an HTTP imposter with multiple stubs:</p>

<pre><code data-test-id='http deepEquals example'
           data-test-step='1'
           data-test-type='http'>
POST /imposters HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
Content-Type: application/json

{
  "port": 4556,
  "protocol": "http",
  "stubs": [<strong class='highlight1'>
    {
      "responses": [{ "is": { "body": "first" } }],
      "predicates": [{
        "deepEquals": {
          "query": {}
        }
      }]
    }</strong>,<strong class='highlight2'>
    {
      "responses": [{ "is": { "body": "second" } }],
      "predicates": [{
        "deepEquals": {
          "query": {
            "first": "1"
          }
        }
      }]
    }</strong>,<strong class='highlight3'>
    {
      "responses": [{ "is": { "body": "third" } }],
      "predicates": [{
        "deepEquals": {
          "query": {
            "first": "1",
            "second": "2"
          }
        }
      }]
    }</strong>
  ]
}
</code></pre>

<p>The first predicate matches only a request without a querystring.</p>

<pre><code data-test-id='http deepEquals example'
           data-test-step='2'
           data-test-type='http'>
GET /test HTTP/1.1
Host: localhost:4556
</code></pre>

<pre><code data-test-id='http deepEquals example'
           data-test-verify-step='2'
           data-test-ignore-lines='["^Date"]'>
HTTP/1.1 200 OK
Connection: close
Date: Thu, 09 Jan 2014 02:30:31 GMT
Transfer-Encoding: chunked

<strong class='highlight1'>first</strong>
</code></pre>

<p>The second stub matches only if the exact querystring is sent.</p>

<pre><code data-test-id='http deepEquals example'
           data-test-step='3'
           data-test-type='http'>
GET /test?<strong class='highlight2'>First=1</strong> HTTP/1.1
Host: localhost:4556
</code></pre>

<pre><code data-test-id='http deepEquals example'
           data-test-verify-step='3'
           data-test-ignore-lines='["^Date"]'>
HTTP/1.1 200 OK
Connection: close
Date: Thu, 09 Jan 2014 02:30:31 GMT
Transfer-Encoding: chunked

<strong class='highlight2'>second</strong>
</code></pre>

<p>The third stub matches only if both query keys are sent.</p>

<pre><code data-test-id='http deepEquals example'
           data-test-step='4'
           data-test-type='http'>
GET /test?<strong class='highlight3'>Second=2&amp;First=1</strong> HTTP/1.1
Host: localhost:4556
</code></pre>

<pre><code data-test-id='http deepEquals example'
           data-test-verify-step='4'
           data-test-ignore-lines='["^Date"]'>
HTTP/1.1 200 OK
Connection: close
Date: Thu, 09 Jan 2014 02:30:31 GMT
Transfer-Encoding: chunked

<strong class='highlight3'>third</strong>
</code></pre>

<p>Any additional query parameters will trigger the default HTTP response.</p>

<pre><code data-test-id='http deepEquals example'
           data-test-step='5'
           data-test-type='http'>
GET /test?Second=2&amp;First=1&amp;Third=3 HTTP/1.1
Host: localhost:4556
</code></pre>

<pre><code data-test-id='http deepEquals example'
           data-test-verify-step='5'
           data-test-ignore-lines='["^Date"]'>
HTTP/1.1 200 OK
Connection: close
Date: Thu, 09 Jan 2014 02:30:31 GMT
Transfer-Encoding: chunked
</code></pre>

<code class='hidden' data-test-id='http deepEquals example'
                     data-test-step='6'
                     data-test-type='http'>
GET /imposters/4556 HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
</code>

<code class='hidden' data-test-id='http deepEquals example'
                     data-test-verify-step='6'
                     data-test-type='http'
                     data-test-ignore-lines='["^Date", "requestFrom", "timestamp", "Content-Length"]'>
HTTP/1.1 200 OK
Access-Control-Allow-Origin: *
Vary: Accept
Content-Type: application/json; charset=utf-8
Content-Length: 4672
Date: Sun, 26 Jan 2014 16:34:18 GMT
Connection: keep-alive

{
  "protocol": "http",
  "port": 4556,
  "numberOfRequests": 4,
  "requests": [
    {
      "requestFrom": "::ffff:127.0.0.1:60438",
      "method": "GET",
      "path": "/test",
      "query": {},
      "headers": {
        "accept": "application/json",
        "Host": "localhost:4556",
        "Connection": "keep-alive"
      },
      "body": "",
      "timestamp": "2014-01-26T16:34:18.022Z"
    },
    {
      "requestFrom": "::ffff:127.0.0.1:60449",
      "method": "GET",
      "path": "/test",
      "query": {
        "First": "1"
      },
      "headers": {
        "accept": "application/json",
        "Host": "localhost:4556",
        "Connection": "keep-alive"
      },
      "body": "",
      "timestamp": "2014-01-26T16:34:18.044Z"
    },
    {
      "requestFrom": "::ffff:127.0.0.1:60459",
      "method": "GET",
      "path": "/test",
      "query": {
        "Second": "2",
        "First": "1"
      },
      "headers": {
        "accept": "application/json",
        "Host": "localhost:4556",
        "Connection": "keep-alive"
      },
      "body": "",
      "timestamp": "2014-01-26T16:34:18.076Z"
    },
    {
      "requestFrom": "::ffff:127.0.0.1:60462",
      "method": "GET",
      "path": "/test",
      "query": {
        "Second": "2",
        "First": "1",
        "Third": "3"
      },
      "headers": {
        "accept": "application/json",
        "Host": "localhost:4556",
        "Connection": "keep-alive"
      },
      "body": "",
      "timestamp": "2014-01-26T16:34:18.080Z"
    }
  ],
  "stubs": [
    {
      "responses": [
        {
          "is": {
            "body": "first"
          }
        }
      ],
      "predicates": [
        {
          "deepEquals": {
            "query": {}
          }
        }
      ],
      "matches": [
        {
          "timestamp": "2014-01-26T16:34:18.336Z",
          "request": {
            "requestFrom": "::ffff:127.0.0.1:60438",
            "method": "GET",
            "path": "/test",
            "query": {},
            "headers": {
              "accept": "application/json",
              "Host": "localhost:4556",
              "Connection": "keep-alive"
            },
            "body": ""
          },
          "response": {
            "statusCode": 200,
            "headers": {
              "Connection": "close"
            },
            "body": "first",
            "_mode": "text"
          }
        }
      ]
    },
    {
      "responses": [
        {
          "is": {
            "body": "second"
          }
        }
      ],
      "predicates": [
        {
          "deepEquals": {
            "query": {
              "first": "1"
            }
          }
        }
      ],
      "matches": [
        {
          "timestamp": "2014-01-26T16:34:18.342Z",
          "request": {
            "requestFrom": "::ffff:127.0.0.1:60449",
            "method": "GET",
            "path": "/test",
            "query": {
              "First": "1"
            },
            "headers": {
              "accept": "application/json",
              "Host": "localhost:4556",
              "Connection": "keep-alive"
            },
            "body": ""
          },
          "response": {
            "statusCode": 200,
            "headers": {
              "Connection": "close"
            },
            "body": "second",
            "_mode": "text"
          }
        }
      ]
    },
    {
      "responses": [
        {
          "is": {
            "body": "third"
          }
        }
      ],
      "predicates": [
        {
          "deepEquals": {
            "query": {
              "first": "1",
              "second": "2"
            }
          }
        }
      ],
      "matches": [
        {
          "timestamp": "2014-01-26T16:34:18.345Z",
          "request": {
            "requestFrom": "::ffff:127.0.0.1:60459)",
            "method": "GET",
            "path": "/test",
            "query": {
              "Second": "2",
              "First": "1"
            },
            "headers": {
              "accept": "application/json",
              "Host": "localhost:4556",
              "Connection": "keep-alive"
            },
            "body": ""
          },
          "response": {
            "statusCode": 200,
            "headers": {
              "Connection": "close"
            },
            "body": "third",
            "_mode": "text"
          }
        }
      ]
    }
  ],
  "_links": {
    "self": {
      "href": "http://localhost:<%= port %>/imposters/4556"
    }
  }
}
</code>

<code class='hidden' data-test-id='http deepEquals example'
                     data-test-step='7'
                     data-test-type='http'>
DELETE /imposters/4556 HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
</code>
