<p>Let's create a binary TCP imposter with multiple stubs:</p>

<pre><code data-test-id='tcp contains example'
           data-test-step='1'
           data-test-type='http'>
POST /imposters HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
Content-Type: application/json

{
  "port": 4547,
  "protocol": "tcp",
  "mode": "binary",
  "stubs": [<strong class='highlight1'>
    {
      "responses": [{ "is": { "data": "Zmlyc3QgcmVzcG9uc2U=" } }],
      "predicates": [{ "contains": { "data": "AgM=" } }]
    }</strong>,<strong class='highlight2'>
    {
      "responses": [{ "is": { "data": "c2Vjb25kIHJlc3BvbnNl" } }],
      "predicates": [{ "contains": { "data": "Bwg=" } }]
    }</strong>,<strong class='highlight3'>
    {
      "responses": [{ "is": { "data": "dGhpcmQgcmVzcG9uc2U=" } }],
      "predicates": [{ "contains": { "data": "Bwg=" } }]
    }</strong>
  ]
}
</code></pre>

<p>We're sending a base64-encoded version of four bytes: 0x1, 0x2, 0x3,
and 0x4.  Our first predicate is a base64 encoded version of 0x2 and 0x3.
The response is a base64-encoded version of the string "first response":</p>

<pre><code data-test-id='tcp contains example'
           data-test-step='2'
           data-test-type='exec'>
echo '<strong class='highlight1'>AQIDBA==</strong>' | base64 --decode | nc localhost 4547
</code></pre>

<pre><code data-test-id='tcp contains example'
           data-test-verify-step='2'>
<strong class='highlight1'>first response</strong>
</code></pre>

<p>Next we'll send 0x5, 0x6, 0x7, and 0x8, matching on a predicate
encoding 0x7 and 0x8:</p>

<pre><code data-test-id='tcp contains example'
           data-test-step='3'
           data-test-type='exec'>
echo '<strong class='highlight2'>BQYHCA==</strong>' | base64 --decode | nc localhost 4547
</code></pre>

<pre><code data-test-id='tcp contains example'
           data-test-verify-step='3'>
<strong class='highlight2'>second response</strong>
</code></pre>

<p>The third stub will never run, since it matches the same requests as the
second stub.  mountebank always chooses the first stub that matches based on
the order you add them to the <code>stubs</code> array when creating the
imposter.</p>

<code class='hidden' data-test-id='tcp contains example'
                     data-test-step='4'
                     data-test-type='http'>
GET /imposters/4547 HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
</code>

<code class='hidden' data-test-id='tcp contains example'
                     data-test-verify-step='4'
                     data-test-type='http'
                     data-test-ignore-lines='["^Date", "requestFrom", "timestamp", "Content-Length"]'>
HTTP/1.1 200 OK
Access-Control-Allow-Origin: *
Vary: Accept
Content-Type: application/json; charset=utf-8
Content-Length: 1901
Date: Fri, 10 Jan 2014 14:30:49 GMT
Connection: keep-alive

{
  "protocol": "tcp",
  "port": 4547,
  "numberOfRequests": 2,
  "mode": "binary",
  "requests": [
    {
      "requestFrom": "::1:60160",
      "data": "AQIDBA==",
      "timestamp": "2014-01-10T14:30:49.022Z"
    },
    {
      "requestFrom": "::1:60174",
      "data": "BQYHCA==",
      "timestamp": "2014-01-10T14:30:49.034Z"
    }
  ],
  "stubs": [
    {
      "responses": [
        {
          "is": {
            "data": "Zmlyc3QgcmVzcG9uc2U="
          }
        }
      ],
      "predicates": [
        {
          "contains": {
            "data": "AgM="
          }
        }
      ],
      "matches": [
        {
          "timestamp": "2014-01-10T14:30:49.776Z",
          "request": {
            "requestFrom": "::1:60160",
            "data": "AQIDBA=="
          },
          "response": {
            "data": "Zmlyc3QgcmVzcG9uc2U="
          }
        }
      ]
    },
    {
      "responses": [
        {
          "is": {
            "data": "c2Vjb25kIHJlc3BvbnNl"
          }
        }
      ],
      "predicates": [
        {
          "contains": {
            "data": "Bwg="
          }
        }
      ],
      "matches": [
        {
          "timestamp": "2014-01-10T14:30:49.794Z",
          "request": {
            "requestFrom": "::1:60174",
            "data": "BQYHCA=="
          },
          "response": {
            "data": "c2Vjb25kIHJlc3BvbnNl"
          }
        }
      ]
    },
    {
      "responses": [
        {
          "is": {
            "data": "dGhpcmQgcmVzcG9uc2U="
          }
        }
      ],
      "predicates": [
        {
          "contains": {
            "data": "Bwg="
          }
        }
      ]
    }
  ],
  "_links": {
    "self": {
      "href": "http://localhost:<%= port %>/imposters/4547"
    }
  }
}
</code>

<code class='hidden' data-test-id='tcp contains example'
                     data-test-step='5'
                     data-test-type='http'>
DELETE /imposters/4547 HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
</code>
