<p>Let's create a text-based imposter with multiple stubs.  Binary imposters
cannot use the <code>matches</code> predicate.</p>

<pre><code data-test-id='tcp matches example'
           data-test-step='1'
           data-test-type='http'>
POST /imposters HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
Content-Type: application/json

{
  "port": 4550,
  "protocol": "tcp",
  "mode": "text",
  "stubs": [<strong class='highlight1'>
    {
      "responses": [{ "is": { "data": "first response" } }],
      "predicates": [{
        "matches": { "data": "^first\\Wsecond" },
        "caseSensitive": true
      }]
    }</strong>,<strong class='highlight2'>
    {
      "responses": [{ "is": { "data": "second response" } }],
      "predicates": [{ "matches": { "data": "second\\s+request" } }]
    }</strong>,<strong class='highlight3'>
    {
      "responses": [{ "is": { "data": "third response" } }],
      "predicates": [{ "matches": { "data": "second\\s+request" } }]
    }</strong>
  ]
}
</code></pre>

<p>The first stub requires a case-sensitive match on a string starting with
"first", followed by a non-word character, followed by "second":</p>

<pre><code data-test-id='tcp matches example'
           data-test-step='2'
           data-test-type='exec'>
echo '<strong class='highlight1'>first second</strong>' | nc localhost 4550
</code></pre>

<pre><code data-test-id='tcp matches example'
           data-test-verify-step='2'>
<strong class='highlight1'>first response</strong>
</code></pre>

<p>The second stub is not case-sensitive.</p>

<pre><code data-test-id='tcp matches example'
           data-test-step='3'
           data-test-type='exec'>
echo '<strong class='highlight2'>Second Request</strong>' | nc localhost 4550
</code></pre>

<pre><code data-test-id='tcp matches example'
           data-test-verify-step='3'>
<strong class='highlight2'>second response</strong>
</code></pre>

<p>The third stub will never run, since it matches the same requests as the
second stub.  mountebank always chooses the first stub that matches based on
the order you add them to the <code>stubs</code> array when creating the
imposter.</p>

<code class='hidden' data-test-id='tcp matches example'
                     data-test-step='4'
                     data-test-type='http'>
GET /imposters/4550 HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
</code>

<code class='hidden' data-test-id='tcp matches example'
                     data-test-verify-step='4'
                     data-test-type='http'
                     data-test-ignore-lines='["^Date", "requestFrom", "timestamp", "Content-Length"]'>
HTTP/1.1 200 OK
Access-Control-Allow-Origin: *
Vary: Accept
Content-Type: application/json; charset=utf-8
Content-Length: 1966
Date: Sun, 26 Jan 2014 17:20:10 GMT
Connection: keep-alive

{
  "protocol": "tcp",
  "port": 4550,
  "numberOfRequests": 2,
  "mode": "text",
  "requests": [
    {
      "requestFrom": "::1:60162",
      "data": "first second\n",
      "timestamp": "2014-01-26T17:20:10.022Z"
    },
    {
      "requestFrom": "::1:60171",
      "data": "Second Request\n",
      "timestamp": "2014-01-26T17:20:10.043Z"
    }
  ],
  "stubs": [
    {
      "responses": [
        {
          "is": {
            "data": "first response"
          }
        }
      ],
      "predicates": [
        {
          "matches": {
            "data": "^first\\Wsecond"
          },
          "caseSensitive": true
        }
      ],
      "matches": [
        {
          "timestamp": "2014-01-26T17:20:10.102Z",
          "request": {
            "requestFrom": "::1:60162",
            "data": "first second\n"
          },
          "response": {
            "data": "first response"
          }
        }
      ]
    },
    {
      "responses": [
        {
          "is": {
            "data": "second response"
          }
        }
      ],
      "predicates": [
        {
          "matches": {
            "data": "second\\s+request"
          }
        }
      ],
      "matches": [
        {
          "timestamp": "2014-01-26T17:20:10.117Z",
          "request": {
            "requestFrom": "::1:60171",
            "data": "Second Request\n"
          },
          "response": {
            "data": "second response"
          }
        }
      ]
    },
    {
      "responses": [
        {
          "is": {
            "data": "third response"
          }
        }
      ],
      "predicates": [
        {
          "matches": {
            "data": "second\\s+request"
          }
        }
      ]
    }
  ],
  "_links": {
    "self": {
      "href": "http://localhost:<%= port %>/imposters/4550"
    }
  }
}
</code>

<code class='hidden' data-test-id='tcp matches example'
                     data-test-step='5'
                     data-test-type='http'>
DELETE /imposters/4550 HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
</code>
